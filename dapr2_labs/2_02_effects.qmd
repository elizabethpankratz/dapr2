---
title: "Effects Coding"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---


```{r setup, include=FALSE}
source('assets/setup.R')

set.seed(3)

library(DT)
library(pander)
library(sjPlot)
library(tidyverse)

```

:::lo

### <i class="fa fa-graduation-cap"></i> Learning Objectives
At the end of this lab, you will:

1. Understand how to specify dummy and sum-to-zero coding
2. Interpret the output from a model using dummy coding
3. Interpret the output from a model using sum-to-zero coding

### <i class="fa fa-check-square-o fa-2"></i> What You Need

1. Be up to date with lectures
2. Have completed previous lab exercises from [Week 1](https://uoepsy.github.io/dapr2/2223/labs/2_01_model_comps.html)

### <i class="fab fa-r-project"></i> Required R Packages
Remember to load all packages within a code chunk at the start of your RMarkdown file using `library()`. If you do not have a package and need to install, do so within the console using `install.packages(" ")`. For further guidance on installing/updating packages, see Section C [here](https://uoepsy.github.io/files/install-update-r#update-pkgs). 

For this lab, you will need to load the following package(s):

* **tidyverse** 
* **psych** 
* **kableExtra**

### <i class="fa fa-file"></i> Lab Data
You can download the data required for this lab [here](https://uoepsy.github.io/data/RestaurantSpending.csv) or read it in via this link https://uoepsy.github.io/data/RestaurantSpending.csv

:::

# Study Overview

> **Research Question** 
>
> Does the type of background music playing in a restaurant influence the amount of money that diners spend on their meal?

A group of researchers wanted to test the claims reported in [@North2003] on whether the type of background music playing in a restaurant influences the average amount of money spent by diners on their meal.

The group researchers got in touch with a restaurant and asked to alternate silence, popular music, and classical music on successive nights over 18 days. On those nights they recorded the mean spend per head for each table.

`r optbegin("Restaurant Spending Codebook", olabel=FALSE, toggle=params$TOGGLE)` 

__Description__

The following variables were collected:

- `id`: Identifier for each diner
- `type`: type of music played ("Classical Music", "Pop Music", "No Music")
- `amount`: restaurant spending per person (in pounds - £)

__Preview__

The first ten rows of the data are:

```{r echo=FALSE, message=FALSE}
read_csv('https://uoepsy.github.io/data/RestaurantSpending.csv') %>% head %>% gt::gt()
```

`r optend()`

# Setup

`r qbegin("Setup", qlabel = FALSE)`  

1. Create a new RMarkdown file
2. Load the required package(s)
3. Read the Restaurant Spending dataset into R, assigning it to an object named `rest_spend` 
 
`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r message=FALSE}
#Loading the required package(s)
library(tidyverse)
library(psych)
library(kableExtra)

#Reading in data and storing in object named 'rest_spend'
rest_spend <- read_csv('https://uoepsy.github.io/data/RestaurantSpending.csv')
```

`r solend()`

# Exercises

`r qbegin(1)`

Examine the dataset, and perform any necessary and appropriate data management steps.

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Let's have a look at the data to see what we're working with:
```{r}
#first look at dataset structure
str(rest_spend)

#now lets look at top 6 rows (or the head) of the dataset
head(rest_spend)
```

Music type is a categorical variable but it is encoded as a character (`<chr>`) variable rather than a factor (`<fctr>`). Let's fix this, and rename 'type' to 'music' and the levels of the factor to avoid repetition whilst we're at it:

```{r}
rest_spend <- rest_spend %>%
    mutate(
        type = factor(type, 
                           levels = c("No Music", "Pop Music", "Classical Music"),
                           labels = c("None", "Pop", "Classical"))) %>%
        rename(music = type)
```


```{r}
#re-examine the top 6 rows of the dataset
head(rest_spend)
```

`r solend()`

<br>

`r qbegin(2)`

Provide a table of descriptive statistics and visualise your data (remember to interpret your plot in the context of the research question).

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

1. For your table of descriptive statistics, both the `group_by()` and `summarise()` functions will come in handy here. 

2. When visualising the data, consider using `geom_boxplot()` to visually explore the association between restaurant spending and music type. 

3. Make sure to comment on any observed differences among the sample means of the three background music types.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

First, let's look at our descriptive statistics and present in a well formatted table:

```{r message=FALSE, warning=FALSE}
#| label: tbl-music-descript
#| tbl-cap: Descriptive Statistics
music_desc <- rest_spend %>% 
            group_by(music) %>%
            summarise(n = n(),
                      Mean = mean(amount),
                      SD = sd(amount),
                      Min = min(amount),
                      Max = max(amount)) %>% 
            kable(caption = "Descriptive Statistics", digits = 2) %>%
            kable_styling()

music_desc
```

Now, let's visualise the association between restaurant spending and music type using a boxplot:

```{r}
#| label: fig-music-desc
#| fig-cap: "Associations among Spending and Music Type"
p1 <- ggplot(data = rest_spend, aes(x = music, y = amount, fill = music)) +
  geom_boxplot() +
  labs(x = 'Background music type', y = 'Restaurant spending (in GBP)')

p1 
```

+ There are three types of music groups ($g = 3$), where there is one group for each music type: “Classical,” “None,” “Pop". Each group has 120 observations. 
+ It seems that customers without background music or pop music had a similar average restaurant spending
+ The average restaurant spending seems to be higher for those who had a classical music background compared to the customers either without music or with a pop music background.


`r solend()`

## Dummy Coding

`r qbegin(3)`

Using dummy coding, choose an appropriate reference level to address the research question, and then formally state a linear model to investigate whether there are differences in restaurant spending based on background music conditions.

Describe and schematically represent the coding matrix used in the above model.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

When you reorder the levels, you should end up with the following coding of group means if you choose 'none' as your reference group:

- $\mu_1$ = mean of no music group
- $\mu_2$ = mean of pop music group
- $\mu_3$ = mean of classical music group

When schematically representing the coding scheme, you should produce a matrix/table of 0s and 1s.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

It makes sense to have no music as our reference level, since both other groups involve some type of music playing:

```{r}
#set 'None' music type condition as our reference group. 
rest_spend$music <- fct_relevel(rest_spend$music , "None")

#check the levels of the variable
levels(rest_spend$music)
```

Specify our model:

$$
\text{Restaurant Spending} = \beta_0 + \beta_1 \cdot \text{Music(Pop)} + \beta_2 \cdot \text{Music(Classical)} + \epsilon
$$
In words:

$$
\text{IsPopMusic} = \begin{cases}
1 & \text{if observation is from the Pop Music category} \\
0 & \text{otherwise}
\end{cases}
$$

$$
\text{IsClassicalMusic} = \begin{cases}
1 & \text{if observation is from the Classical Music category} \\
0 & \text{otherwise}
\end{cases}
$$

Schematically:

$$
\begin{matrix}
\textbf{Level}  & \textbf{IsPopMusic} & \textbf{IsClassicalMusic} \\
\hline
\text{None}       & 0   & 0   \\
\text{Pop}            & 1   & 0   \\
\text{Clasical}             & 0   & 1
\end{matrix}
$$

`r solend()`

<br>

`r qbegin(4)`

Fit the specified model, and assign it the name "mdl_rg" (for reference group constraint). 

Interpret your coefficients in the context of the study.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

Under the constraint $\beta_1 = 0$, meaning that the first factor level is the reference group,

- $\beta_0$ is interpreted as $\mu_1$, the mean response for the reference group (group 1);
- $\beta_i$ is interpreted as the difference between the mean response for group $i$ and the reference group.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
#fit model
mdl_rg <- lm(amount ~ music, data = rest_spend)

#check output
summary(mdl_rg)

```

The interpretation is as follows:

| Coefficient | Estimate | Corresponds to |
|:-:|:-:|:-:|
| (Intercept)   |  22.1414 | $\hat \beta_0 = \hat \mu_1$ |
| musicPop    | -0.2424  | $\hat \beta_2 = \hat \mu_2 - \hat \beta_0 = \hat \mu_2 - \hat \mu_1$ |
| musicClassical    | 2.0328  | $\hat \beta_3 = \hat \mu_3 - \hat \beta_0 = \hat \mu_3 - \hat \mu_1$ |

The estimate corresponding to (Intercept) contains $\hat \beta_0 = \hat \mu_1 = 22.1414$. The estimated average spending for those having no music playing in the background is approximately £22.14.

The next estimate corresponds to `musicPop` and is $\hat \beta_2 = -0.2424$. The difference in mean spending between `None` and `Pop` is estimated to be $-0.2424$. In other words, people with pop music playing in the background seem to spend approximately £0.24 less than those who have no music playing in the background.

The estimate corresponding to `musicClassical` is $\hat \beta_3 = 2.0328$. This is the estimated difference in mean spending between `None` and `Classical`. People with classical music background in the background seem to spend approximately £2.03 more than those who have no music playing in the background.

Hence, for all levels except the reference group we see differences to the reference group while the estimate of the reference level can be found next to `(Intercept)`.

It is also important to notice how the coefficients' names are written. They are a combination of `factor name` and `level name`, such as `musicPop`.
The only coefficient that is missing is `musicNone`, the one corresponding to the reference category `None`.

`r solend()`

<br>

`r qbegin(5)`

Identify the relevant pieces of information from the commands `anova(mdl_rg)` and `summary(mdl_rg)` that can be used to conduct an ANOVA $F$-test against the null hypothesis that all population means are equal.

Interpret the $F$-test results in the context of the ANOVA null hypothesis, and present this output in an APA formatted table.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint
To create a table, you can use the `kable()` function from the **kableExtra** package here, just like you do for tables of descriptive statistics. Note that we need to list how many digits we want our values to be rounded to in our table:
+ Degrees of freedom are whole numbers, so 1 will suffice
+ for all others, we want 2 (in line with [APA](https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf), but to avoid a $p$-value of zero, specify 10

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#examine summary
summary(mdl_rg)

#run anova
anova(mdl_rg)
```

The model summary returns the $F$-test of model utility which, in this case, corresponds to the ANOVA $F$-test against the null hypothesis of equal population means.

The relevant line from `summary()` is:
```
F-statistic: 23.21 on 2 and 357 DF,  p-value: 3.335e-10
```

The relevant parts from `anova()` are:

- `F value` of `23.211`
- The `Df` column giving `2` and `357` degrees of freedom
- The p-value of the test, reported under `Pr(>F)` as `3.335e-10 ***`.

We can create a nice table of our anova results:

```{r}
#| label: tbl-anova-results
#| tbl-cap: "Analysis of Variance Table"
anova(mdl_rg) %>%
    kable(caption = "Analysis of Variance Table", digits = c(1, 2, 2, 2, 10)) %>%
    kable_styling()
    
```

We can write this up as follows:

::: {.callout-important icon=false appearance="minimal"} 

We performed an analysis of variance against the null hypothesis of equal population mean spending across three types of background music, $F(2, 357) = 23.21$, $p < .001$.

The large observed $F$-statistic led to a very small *p*-value, meaning that such a large observed variability among the mean restaurant spending across the different music types, compared to the variability in the residuals, is very unlikely to happen by chance alone if the population means where all the same (see @tbl-anova-results).

For this reason, at the 5\% significance level, we reject the null hypothesis as there is strong evidence that at least two population means differ.

:::
`r solend()`

<br>

`r qbegin(6)`

Obtain the estimated (or predicted) group means for the “None,” “Pop,” and “Classical” background music conditions by using the `predict()` function.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

Step 1: Define a data frame with a column having the same name as the factor in the fitted model (i.e., music). Then, specify all the groups (= levels) for which you would like the predicted mean.

Step 2: Pass the data frame to the predict function using the `newdata = ` argument. The `predict()` function will match the column named type with the predictor called type in the fitted model 'mdl_rg'.

See [Semester 1 Lab 3 Q8](https://uoepsy.github.io/dapr2/2223/labs/1_03_mlr.html) for a worked example. 

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Step 1:

```{r}
query_groups <- tibble(music = c("None", "Pop", "Classical"))
query_groups
```

Step 2:

```{r}
predict(mdl_rg, newdata = query_groups)
```

- Predicted mean of "None" = $\hat \mu_\text{None}$ = 22.1414
- Predicted mean of "Pop" = $\hat \mu_\text{Pop}$ = 22.1414 - 0.2424 = 21.899
- Predicted mean of "Classical" = $\hat \mu_\text{Classical}$ = 22.1414 + 2.0328 = 24.1742

`r solend()`

## Sum to Zero Coding

`r qbegin(7)`

Using sum-to-zero coding, formally state a linear model to investigate whether there are differences in restaurant spending based on background music conditions. 

Describe and schematically represent the coding matrix used in the above model.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

When schematically representing the coding scheme, you should produce a matrix/table of 0s and 1s.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Specify our model:

$$
\text{Restaurant Spending} = \beta_0 + \beta_1 \cdot \text{EffectLevel1} + \beta_2 \cdot \text{EffectLevel2} + \epsilon
$$
In words:

$$
\text{EffectLevel1} = \begin{cases}
1  & \text{if observation is from category 1} \\
0  & \text{if observation is from category 2} \\
-1 & \text{otherwise}
\end{cases}
$$

$$
\text{EffectLevel2} = \begin{cases}
0  & \text{if observation is from category 1} \\
1  & \text{if observation is from category 2} \\
-1 & \text{otherwise}
\end{cases}
$$

Schematically:

$$
\begin{matrix}
\textbf{Level}           & \textbf{EffectLevel1} & \textbf{EffectLevel2} \\
\hline
\text{None}              & 1   & 0    \\
\text{Pop}               & 0   & 1    \\
\text{Classical}         & -1  & -1
\end{matrix}
$$
`r solend()`

<br>

`r qbegin(8)`

Set the sum to zero constraint for the factor of background music.

Fit again the linear model, and assign the model the name 'mdl_stz'.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

We can switch between side-constraints using the following code:

```{r, eval = FALSE}
#use dummy coding
contrasts(rest_spend$music) <- "contr.treatment"

#use sum-to-zero coding
contrasts(rest_spend$music) <- "contr.sum"
```

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
contrasts(rest_spend$music) <- "contr.sum"

#check coding matches our table above:
contrasts(rest_spend$music)
```

```{r}
mdl_stz <- lm(amount ~ music, data = rest_spend)
summary(mdl_stz)
```

`r solend()`

<br> 

`r qbegin(9)`

Interpret your coefficients in the context of the study.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

Recall that under this constraint the interpretation of the coefficients becomes:

- $\beta_0$ represents the grand mean
- $\beta_i$ the effect due to group $i$ --- that is, the mean response in group $i$ minus the grand mean

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The interpretation is as follows:

| Coefficient | Estimate | Corresponds to |
|:-:|:-:|:-:|
| (Intercept)   |  22.7382 | $\beta_0 = \frac{\mu_1 + \mu_2 + \mu_3}{3} = \mu$
| music1        | -0.5968  | $\beta_1 = \mu_1 - \mu$ |
| music2        | -0.8392  | $\beta_2 = \mu_2 - \mu$ |

The estimate corresponding to `(Intercept)` contains $\beta_0 = \mu = 22.7382$. This value represents the grand mean of the data. The estimated average spending for customers across background music conditions is approximately £22.74.

The next estimate corresponds to `music1` and is $\hat \beta_1 = -0.5968$. The difference in mean spending between `None` and the grand mean is estimated to be $-0.5968$. In other words, people with no music playing in the background seem to spend approximately £0.60 less than average. 

The estimate corresponding to `music2` is $\hat \beta_2 = -0.8392$. The difference in mean spending between `Pop` and the grand mean is estimated to be $-0.8392$. In other words, customers with Pop music playing in the background seem to spend approximately £0.84 less than average.

The estimate for `music3`, representing the difference of “Classical” to the grand mean is *not shown* by `summary()`. Because of the side-constraint, we know it must be $\beta_3 = -(\beta_1 + \beta_2)$. The difference in mean spending between `Classical` and the grand mean is estimated to be $-(-0.5968 + -0.8392) = 1.436$. In other words, customers with Classical music playing in the background seem to spend approximately £1.44 more than average.

`r solend()`

## Comparing Approaches

`r qbegin(10)`

Compare the the predicted group means across both contrast approaches - do they match?

Is the model utility $F$-test still the same across both approaches? Why do you think it’s the case?

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#note that the below two models and dataset have already been created above, so you can jump straight to adding the predicted values from the two models if you'd prefer 

#model with dummy coding
contrasts(rest_spend$music) <- contr.treatment
mdl_rg <- lm(amount ~ music, data = rest_spend)

# model with sum-to-zero coding
contrasts(rest_spend$music) <- contr.sum
mdl_stz <- lm(amount ~ music, data = rest_spend)

#create dataset
music_groups <- tibble(music = c("None", "Pop", "Classical"))
music_groups

#add predicted values from our two models - mdl_rg & mdl_stz - values are the same
music_groups %>%
  mutate(
    pred_dummy = predict(mdl_rg, newdata = .),
    pred_sum_to_zero = predict(mdl_stz, newdata = .)
  )
```


```{r}
#compare anova() outputs - values are the same
anova(mdl_rg)
anova(mdl_stz)
```

Yes, the values from both the dummy coding and sum-to-zero approaches give the same values. This is because, regardless of the coding matrix scheme we use to compare groups, we are still modelling the same group means from our data set. Thus, neither the predicted means nor the model utility $F$-test depend on the side-constraint that we employ. However, the side-constraint affects the meaning of the parameters in the model. 

`r solend()`