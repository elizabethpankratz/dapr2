---
title: "Binary Logistic Regression"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
source('assets/setup.R')

set.seed(953)

library(DT)
library(pander)
library(sjPlot)
library(tidyverse)
library(car)

```

:::lo

### <i class="fa fa-graduation-cap"></i> Learning Objectives
At the end of this lab, you will:

1. Understand when to use a logistic model
2. Understand how to fit and interpret a logistic model

### <i class="fa fa-check-square-o fa-2"></i> What You Need

1. Be up to date with lectures
2. Have completed Labs 1-4

### <i class="fab fa-r-project"></i> Required R Packages
Remember to load all packages within a code chunk at the start of your RMarkdown file using `library()`. If you do not have a package and need to install, do so within the console using `install.packages(" ")`. For further guidance on installing/updating packages, see Section C [here](https://uoepsy.github.io/files/install-update-r#update-pkgs). 

For this lab, you will need to load the following package(s):

* **tidyverse** 
* **patchwork**
* **kableExtra**
* **pander**
* **sjPlot**

### <i class="fa fa-file"></i> Lab Data
You can download the data required for this lab [here](https://uoepsy.github.io/data/drunkdoor.csv) or read it in via this link https://uoepsy.github.io/data/drunkdoor.csv. 

:::


# Study Overview

> **Research Question** 
>
> Is susceptibility to change blindness influenced by age, level of alcohol intoxication, and perceptual load?

Watch the following video:

<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/FWSxSQsspiQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><br>
[Simons, D. J., & Levin, D. T. (1997). Change blindness. Trends in cognitive sciences, 1(7), 261-267.](https://www.cse.iitk.ac.in/users/se367/11/papers/simons-ambinder-05_change-blindness.pdf)
</p>

You may well have already heard of these series of experiments, or have seen similar things on [Netflix](https://www.netflix.com/gb/title/80190510).

`r optbegin("Drunk Door Codebook", olabel=FALSE, toggle=params$TOGGLE)` 

__Description__

**Method**  
Researchers conducted a study in which they approached 120 people, recruited from within the vicinity of a number of establishments with licenses to sell alcohol to be consumed on-premises. Initially, experimenter A approached participants and asked if they were interested in participating in a short study, and obtained their written consent. While experimenter A subsequently talked each participant through a set of questions on multiple pieces of paper (with the pretense of explaining what the participant was required to do), experimenters B and C carrying a door passed between the participant and experimenter A, with experimenter C replacing A (as can be viewed in the video). 

The perceptual load of the experiment was manipulated via a) the presentation of the door and b) the papers held by the experimenters. For 60 of these participants, the door was painted with some detailed graffiti and had a variety of pieces of paper and notices attached to the side facing the participants. Additionally, for these participants, the experimenters handled a disorganised pile of 30 papers, with the top pages covered in drawings around the printed text. For the remaining 60, the door was a standard MDF construction painted a neutral grey, and the experimenters handled only 2 sheets of paper which had minimal printed text on them and nothing else. 

**Measures**   
After experimenters A and C had successfully swapped positions, the participant was asked (now by C) to complete small number of questions taking approximately 1 minute. Either after this set of questions, or if the participant made an indication that they had noticed the swap, the experimenters regrouped and the participant was explicitly asked whether they had noticed the swap.   

Immediately after this, participants were breathalysed, and their blood alcohol content was recorded.  

__Preview__

The first six rows of the data are:

```{r echo=FALSE, message=FALSE}
read_csv('https://uoepsy.github.io/data/drunkdoor.csv') %>% head %>% gt::gt()
```

`r optend()`

# Setup

`r qbegin("Setup", qlabel = FALSE)`  

1. Create a new RMarkdown file
2. Load the required package(s)
3. Read the caffeinedrink dataset into R, assigning it to an object named `drunkdoor` 
 
`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r message=FALSE}
#load packages
library(tidyverse)
library(psych)
library(kableExtra)
library(ggmosaic)
library(patchwork)
library(sjPlot)

#read in data
drunkdoor <- read_csv("https://uoepsy.github.io/data/drunkdoor.csv")
```

`r solend()`

<br>

`r qbegin(1)`

Examine the dataset, and perform any necessary and appropriate data management steps.

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#look at structure of data
str(drunkdoor)

#check for NAs - there are none - all FALSE
table(is.na(drunkdoor))

#re-assign categorical IVs as factors
drunkdoor$condition <- factor(drunkdoor$condition,
                              labels = c("High", "Low"))
```

`r solend()`

<br>

`r qbegin(2)`

Provide a table of descriptive statistics and visualise your data.

Remember to interpret your plot in the context of the study. 

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

1. For your table of descriptive statistics, both the `group_by()` and `summarise()` functions will come in handy here.
2. Recall that when visualising a continuous outcome across several groups, `geom_boxplot()` may be most appropriate to use.
3. Make sure to comment on any observed differences among the sample means of the four treatment conditions.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Let's first produce a descriptive statistics table:

```{r message=FALSE, warning=FALSE}
#| label: tbl-cog-descript
#| tbl-cap: Descriptive Statistics
door_stats <- drunkdoor %>% 
    group_by(notice, condition) %>%
    summarise(
        Avg_Age = mean(age), 
        SD_Age = sd(age),
        SE_Age = sd(age) / sqrt(n()),
        Min_Age = min(age),
        Max_Age = max(age),        
        Avg_BAC = mean(bac), 
        SD_BAC = sd(bac),
        SE_BAC = sd(bac) / sqrt(n()),
        Min_BAC = min(bac),
        Max_BAC = max(bac)) %>%
    kable(caption = "Descriptive Statistics", digits = 2) %>%
    kable_styling()

door_stats
```

We can explore each of the IVs associations with our DV individually:

```{r}
#| label: fig-cog-desc
#| fig-cap: "Association between Task Condition, Diagnosis, and Average Score"

door_plt1 <- ggplot(data = drunkdoor, aes(x=as_factor(notice), fill = as_factor(notice))) +
  geom_bar() +
  xlab("Notice")
door_plt1

door_plt2 <- ggplot(data = drunkdoor) +
  geom_mosaic(aes(x = product(as_factor(notice), condition), fill = as_factor(notice))) +
  xlab("Condition")
door_plt2

door_plt3 <- ggplot(data = drunkdoor, aes(x=age, fill=as_factor(notice))) +
  geom_density() +
  xlab("Age")
door_plt3 

door_plt4 <- ggplot(data = drunkdoor, aes(x=bac, fill=as_factor(notice))) +
  geom_density() +
  xlab("BAC")
door_plt4 

door_plt1 | door_plt2 | door_plt3 | door_plt4
```

`r solend()`

<br>

`r qbegin(3)`

Just visually following the line from the plot produced below, what do you think the predicted model value would be for someone who is aged 30?
What does this value mean?

```{r echo = FALSE}
ggplot(drunkdoor, aes(x=age, y=notice))+
  geom_point()+
   geom_smooth(method = "lm")
```

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

This plot will make it easier to see that the model predicted value for someone aged 30 is approximately 1.15. 

What does 1.15 really mean here? A 30 year old participant will notice 1.15 experimenter-swaps? They have a 115% probability of noticing the swap? That is maybe closer, but we can’t have such a probability - probability is between 0 and 1.

`r solend()`

<br>

`r qbegin(4)`

Consider the scales that the variables are currently on, with a particular focus on BAC and age. 

+ Do you want BAC on the current scale, or could you transform it somehow?
+ Do you want age to be centred at 0 years (as it currently is), or could you re-centre to make it more meaningful?

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

It would be more useful to have blood alcohol (BAC) in terms of 100ths of percentages, rather than percentages.

It would also be more useful for interpretation to have age centered on the mean (note that this won’t change anything other than the intercept in our model).

```{r}
drunkdoor <- drunkdoor %>% 
  mutate(
    bac100 = bac*100,
    age_mc = age - mean(age)
  )
```

`r solend()`

<br>

`r qbegin(5)`

Fit your model using `glm()`, and assign it as an object with the name "changeblind_mdl".   

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
changeblind_mdl <- glm(notice ~ age_mc + bac100 + condition, data = drunkdoor, family = "binomial")
summary(changeblind_mdl)
```

`r solend()`

<br>

`r qbegin(6)`

Interpret your coefficients in the context of the study. When doing so, it may be useful to translate the log-odds back into odds.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

The opposite of the natural logarithm is the exponential (see here for more details if you are interested), and in R these functions are `log()` and `exp()`.

Recall that we can obtain our parameter estimates using various functions such as `summary()`,`coef()`, `coefficients()`, etc. Thus, we want to exponentiate the coefficients from our model in order to translate them back from log-odds.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`


```{r}
exp(coefficients(changeblind_mdl))
```

+ $\beta_0$ = `(Intercept)` = `r round(coef(changeblind_mdl)[1],2)`
    - The odds of noticing a mid-conversation person-switch for someone age 0, with 0 BAC, in the High condition is 32907:1. 

+ $\beta_1$ = `age` = `r round(coef(changeblind_mdl)[2],2)`
    - For every year older someone is, the odds of noticing reduces by a factor of 0.80.
    
+ $\beta_2$ = `bac100` = `r round(coef(changeblind_mdl)[3],2)`
    - For every 1 unit increase in BAC, the odds of noticing a mid-conversation person switch increases by a factor of 1.42.

+ $\beta_3$ `conditionLow` = `r round(coef(changeblind_mdl)[4],2)`
    - For those in the Low condition, the odds of noticing a mid-conversation person switch is higher by a factor of 4.91 in comparison to those in the High condition.

`r solend()`

<br>

`r qbegin(7)`

Plot the predicted data, using the original data points. 

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
library(ggeffects)
plt_glm <- plot(ggpredict(changeblind_mdl,c("age_mc","bac100", "condition")))
plt_glm
```

```{r}
ggplot(drunkdoor, aes(x=age_mc, y=notice, fill = condition))+
  geom_point(aes(colour = bac100))+
   geom_smooth(method = "glm", method.args = list(family = "binomial"))
```

`r solend()`

<br>

`r qbegin(8)`

Provide key model results in a formatted table.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint 

Use `tab_model()` from the __sjPlot__ package. 

Remember that you can rename your DV and IV labels by specifying `dv.labels` and `pred.labels`.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#| label: tbl-notice-modresults
#| tbl-cap: Regression table for Notice model
#create table for results
tab_model(changeblind_mdl,
          dv.labels = "Notice",
          pred.labels = c("age" = "Age (in years)",
                          "bac" = "Blood Alcohol Level (BAC)",
                          "condition" = "Condition - High"),
          title = "Regression table for Notice Model")
```

`r solend()`

<br>

`r qbegin(9)`

Interpret your results in the context of the research question and report your model in full.

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Make sure to write your results up following [APA guidelines](https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf):

::: {.callout-important icon=false appearance="minimal"}


```{r}
#| include: false
res <- exp(car::Confint(changeblind_mdl))
res <- round(res,2)
```


Whether or not participants noticed the swap mid-conversation (binary 0 vs 1) was modelled using logistic regression, with blood alcohol content (BAC; measured in 100th of percentages blood content), perceptual load condition (low load vs high load, with low as the reference level), and age (in years). See @tbl-notice-modresults for full model results.

In keeping with previous research, age was found to be associated with susceptibility to change-blindness, as indicated by decreased odds of noting the mid-conversation swap ($OR = `r res[2,1]`,\,\, 95\%\, CI\, [`r paste(res[2,2:3],collapse=", ")`]$), after accounting for differences in blood alcohol levels and perceptual load. 

In contrary to what might have been expected, change-blindness appeared to decrease with higher alcohol intoxication, with the odds of noticing the swap increasing `r res[3,1]` times ($[`r paste(res[3,2:3],collapse=", ")`]$) for every 1/100th of a percentage increase in blood alcohol content, holding age and perceptual load constant. 

After accounting for age and blood alcohol levels, the odds of noticing the swap were significantly different depending upon the perceptual load, with higher perceptual load associated with `r res[4,1]` ($[`r paste(res[4,2:3],collapse=", ")`]$) times the odds of noticing the change. 

In summary, older age increased the susceptibility to change blindness. Increased perceptual load was also found to increase the chances of people being blind to change, in keeping with the intuition that we have a finite capacity for attention, which is taken up more by more distracting objects. Surprisingly, levels of alcohol intoxication appeared to be associated with a greater chance of noticing change. 

:::

`r solend()`

<br>

`r qbegin(10)`

Create a confusion matrix (i.e., a table of predicted outcome vs observed outcome, as displayed in @fig-confmat), and state what percentage of the 120 observations were correctly classified by our model, when the threshold is set at 0.5?

```{r confmat, echo=FALSE, fig.cap="Confusion Matrix"}
knitr::include_graphics("images/glm/cmat.png")
```

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

1. Add new column to the drunkdoor dataset which contains the predicted probability of the outcome for each observation.
2. Using `ifelse()`, add another column which is these predicted probabilities translated into the predicted binary outcome (0 or 1) based on whether the probability is greater than > .5.
3. Create a two-way contingency table of the predicted outcome and the observed outcome.

Note: You don’t need the `newdata = ` argument for `predict()` if you want to use the original data the model was fitted on.

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Another way to think about how our model is fitted is that it aims to maximise (TP + TN)/n, or, put another way, to minimise (FP+FN)/n.
This is equivalent to the good old idea of minimising sums of squares (where we minimise the extend to which the predicted values differ from the observed values).

```{r}
# add predicted probability (predprobs) column
# add pred binary outcome (predclass) column
drunkdoor <-
  drunkdoor %>%
  mutate(
    predprobs = predict(changeblind_mdl, type="response"),
    predclass = ifelse(predprobs > 0.5, 1, 0)
  )

# create contingency table 
drunkdoor %>%
  select(notice, predclass) %>%
  table()
```

Let's calculate how many observations were correctly classified:

```{r}
#correctly classified

sum(drunkdoor$predclass == drunkdoor$notice) / nrow(drunkdoor)
```

The model correctly classifies 67.5% of the observations.

`r solend()`
