---
title: "Assumptions and Diagnostics"
link-citations: TRUE
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
source('assets/setup.R')
library(tidyverse)
library(plotly)
library(patchwork)
library(pander)
library(car)
library(performance)
set.seed(953)
```

:::lo

### <i class="fa fa-graduation-cap"></i> Learning Objectives
At the end of this lab, you will:

1. Be able to state the assumptions underlying a linear model.
2. Specify the assumptions underlying a linear model with multiple predictors.
3. Assess if a fitted model satisfies the assumptions of your model.
4. Assess the effect of influential cases on linear model coefficients and overall model evaluations.

### <i class="fa fa-check-square-o fa-2"></i> What You Need

1. Be up to date with lectures

### <i class="fab fa-r-project"></i> Required R Packages
Remember to load all packages within a code chunk at the start of your RMarkdown file using `library()`. If you do not have a package and need to install, do so within the console using `install.packages(" ")`. For further guidance on installing/updating packages, see Section C [here](https://uoepsy.github.io/files/install-update-r#update-pkgs). 

For this lab, you will need to load the following package(s):

* **tidyverse** 
* **car**
* **see**
* **performance**

### <i class="fa fa-pencil-square-o" aria-hidden="true"></i> Presenting Results
All results should be presented following [APA guidelines](https://apastyle.apa.org/instructional-aids/numbers-statistics-guide.pdf). If you need a reminder on how to hide code, format tables/plots, etc., make sure to review the [rmd bootcamp](https://uoepsy.github.io//rmd-bootcamp/).

The example write-up sections included as part of the solutions are **not perfect** - they instead should give you a good example of what information you should include and how to structure this. Note that you must **not** copy any of the write-ups included below for future reports - if you do, you will be committing plagiarism, and this type of academic misconduct is taken very seriously by the University. You can find out more [here](https://www.ed.ac.uk/academic-services/students/conduct/academic-misconduct).

### <i class="fa fa-file"></i> Lab Data
You can download the data required for this lab [here](https://uoepsy.github.io/data/wellbeing_rural.csv) or read it in via this link https://uoepsy.github.io/data/wellbeing_rural.csv 
:::

# Lab Overview

In the previous labs, we have fitted a number of regression models, including some with multiple predictors. In each case, we first specified the model, then visually explored the marginal distributions and associations among variables which would be used in the analysis. Finally, we fit the model, and began to examine the fit by studying what the various parameter estimates represented, and the spread of the residuals.

But before we draw inferences using our model estimates or use our model to make predictions, we need to be satisfied that our model meets a specific set of assumptions. If these assumptions are not satisfied, the results will not hold.

In this lab, we will check the assumptions of one of the models that we have previously fitted in Block 1 where we will assess the assumptions of the multiple linear regression model we fitted using the 'mwdata' dataset in [Week 2](). 

# Study Overview {#sec-studyview}

> **Research Question** 
>
> Is there an association between wellbeing and time spent outdoors *after* taking into account the association between wellbeing and social interactions? 

`r optbegin("Wellbeing/Rurality data codebook.", olabel=FALSE, toggle=params$TOGGLE)`  

__Description__

From the Edinburgh & Lothians, 100 city/suburb residences and 100 rural residences were chosen at random and contacted to participate in the study. The Warwick-Edinburgh Mental Wellbeing Scale (WEMWBS), was used to measure mental health and well-being. 

Participants filled out a questionnaire including items concerning: estimated average number of hours spent outdoors each week, estimated average number of social interactions each week (whether on-line or in-person), whether a daily routine is followed (yes/no). For those respondents who had an activity tracker app or smart watch, they were asked to provide their average weekly number of steps.  
  
  
__Data Dictionary__

The data in `wellbeing_rural.csv` contain seven attributes collected from a random sample of $n=200$ hypothetical residents over Edinburgh & Lothians, and include: 

```{r echo=FALSE, message=FALSE, warning=FALSE}
mwdata  <- read_csv("https://uoepsy.github.io/data/wellbeing_rural.csv")
tibble(
variable = names(mwdata),
description = c("Age in years of respondent","Self report estimated number of hours per week spent outdoors ", "Self report estimated number of social interactions per week (both online and in-person)", "Binary 1=Yes/0=No response to the question 'Do you follow a daily routine throughout the week?'", "Warwick-Edinburgh Mental Wellbeing Scale (WEMWBS), a self-report measure of mental health and well-being. The scale is scored by summing responses to each item, with items answered on a 1 to 5 Likert scale. The minimum scale score is 14 and the maximum is 70", "Location of primary residence (City, Suburb, Rural)", "Average weekly number of steps in thousands (as given by activity tracker if available)")
) %>% gt::gt()
```
  
  
__Preview__

The first six rows of the data are:

```{r echo=FALSE, message=FALSE}
read_csv('https://uoepsy.github.io/data/wellbeing_rural.csv') %>% head %>% gt::gt()
```
  
`r optend()`

<div class="divider div-transparent div-dot"></div>

# Setup

`r qbegin("Setup", qlabel = FALSE)`  

1. Create a new RMarkdown file
2. Load the required package(s)
3. Read the wellbeing dataset into R, assigning it to an object named `mwdata`
4. Fit the following model:

$$
\text{Wellbeing} = \beta_0 + \beta_1 \cdot Social~Interactions + \beta_2 \cdot Outdoor~Time + \epsilon
$$

`r qend()`

`r solbegin(show = params$SHOW_SOLS, toggle = params$TOGGLE)`

```{r message=FALSE}
#Loading the required package(s)
library(tidyverse)
library(car)
library(see)
library(performance)

# Reading in data and storing to an object named 'mwdata'
mwdata <- read_csv("https://uoepsy.github.io/data/wellbeing_rural.csv")

## wellbeing model
wb_mdl1 <- lm(wellbeing ~ outdoor_time + social_int, data = mwdata) 

```

`r solend()`

<div class="divider div-transparent div-dot"></div>

# Exercises

## Assumptions

:::frame

**Assumptions**

You can remember the four assumptions by memorising the acronym LINE:

+ **L**inearity: The relationship between $y$ and $x$ is linear.
+ **I**ndependence of errors: The error terms should be independent from one another.
+ **N**ormality: The errors $\epsilon$ are normally distributed in the population.
+ **E**qual variances ("Homoscedasticity"): The variability of the errors  $\epsilon$ is constant across $x$.  

:::

`r qbegin(1)`

Let's start by using `check_model()` for our `wb_mdl1` model - we can refer to these plots as a guide as we work through the assumptions questions of the lab.

:::{.callout-note appearance="simple" collapse="true"}

These plots **cannot** be used in your reports - they are to be used as a guide only.

:::
`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
check_model(wb_mdl1)
```

The `check_model()` function is a useful way to check the assumptions of models, as it also returns some useful notes to aid your interpretation. There does appear to be evidence that some assumptions have been violated, **but** to be sure we need to check each assumption individually with plots that are more suitable for a statistics report. 

`r solend()`

<br>

`r qbegin(2)`

Check if the fitted model satisfies the linearity assumption for `wb_mdl1`. 

Write a sentence summarising whether or not you consider the assumption to have been met. Justify your answer with reference to the plots.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

When we have multiple predictors, we need to use component-residual plots (also known as partial-residual plots) to check the assumption of linearity. 

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r, fig.width = 10, out.width = '85%'}
crPlots(wb_mdl1)
```

::: {.callout-important icon=false appearance="minimal"}

The smoother (the pink line) follows quite closely to a linear relationship (the dashed blue line), though there is some deviation (especially for social interactions). Overall, the evidence suggests that the linearity assumption is met.  
:::

`r solend()`

<br>

`r qbegin(3)`
Check if the fitted model `wb_mdl1` satisfy the equal variance assumption. 

Write a sentence summarising whether or not you consider the assumption to have been met. Justify your answer with reference to the plot.

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

Use `residualPlots()` to plot residuals against the predictor. 

For interpretation - if the assumption is met, you should see a random scatter of $(x, y)$ points with constant mean and variance functions i.e., the vertical spread of the residuals should roughly be the same everywhere.
 
:::

`r qend()`

`r solbegin(show = params$SHOW_SOLS, toggle = params$TOGGLE)`

We can visually assess by plotting the Pearson residuals against the fitted values:

```{r, fig.width = 8, out.width = '90%'}
residualPlots(wb_mdl1)
```
  
:::{.callout-hint collapse="true"}

**Quick Tip** 

As the residuals can be positive or negative, we can make it easier to assess equal spread by improving the 'resolution' of the points.

We can make all residuals positive by discarding the sign (take the absolute value), and then take the square root to make them closer to each other.

A plot of $\sqrt{|\text{Standardized residuals}|}$ against the fitted values is shown below:

```{r}
plot(wb_mdl1, which = 3)
```

The plot above has the points closer to each other, and all above 0. The line seems to be relatively flat (as it should be if the spread was constant). The data met the assumption of equal variance.

:::

::: {.callout-important icon=false appearance="minimal"}

Partial residual plots show no clear non-linear trends between residuals and predictors, hence there is little sign of non-constant variance. The data met the assumption of equal variance as the spread of the standardized residuals appears to be constant as the fitted values vary.

:::

`r solend()`

<br> 

`r qbegin(4)`

For `wb_mdl1`, visually assess whether there is autocorrelation in the error terms.  
  
Write a sentence summarising whether or not you consider the assumption of independence to have been met (you may have to assume certain aspects of the study design).  

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

To get a single figure made up of 2 by 1 panels, you can use the command `par(mfrow = c(1,2))`. Then create the plot. Then you need to go back to a single figure made up by a single panel with the command `par(mfrow = c(1,1))`.
 
:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
par(mfrow = c(1,2))
plot(resid(wb_mdl1))
plot(fitted(wb_mdl1), resid(wb_mdl1))
par(mfrow = c(1,1))
```

::: {.callout-important icon=false appearance="minimal"}

Since our data were collected from a between-persons study design, we can assume the errors to be independent. This is supported by the plot of the residuals vs their index, as this shows no clear dependence (if they were collected over time, for example, and there was an increasing trend this would highlight a violation). The residuals vs fitted plot shows that there is no association between the errors and the model predictions. 
:::

:::

`r solend()`

<br>

`r qbegin(5)`

Check if the fitted model `wb_mdl1` satisfies the normality assumption. 
  
Write a sentence summarising whether or not you consider the assumption to have been met. Justify your answer with reference to the plots. 

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

We can get the QQplot from `plot(model, which = ???)`, and you can plot the frequency distribution of the residuals via `hist(model$residuals)`. 

For interpretation - remember that departures from a linear trend in QQ plots indicate a lack of normality.
 
:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Histogram:
```{r}
hist(wb_mdl1$residuals)
```

QQ Plot:
```{r}
plot(wb_mdl1, which = 2)
```

::: {.callout-important icon=false appearance="minimal"}

The QQplot indicated that the residuals follow close to a normal distribution. Although there is some evidence of heavier tails, given the small sample size ($n$=32) it is not of concern and we can be more conservative in our visual assessment of the plot.

The normal quantile plot follows a linear pattern and does not highlight any substantial skew or departure from normality.
:::

:::

`r solend()`

<br>

## Multicollinearity 

`r qbegin(6)`

For `wb_mdl1`, calculate the variance inflation factor (VIF) for the predictors in the model.  

Write a sentence summarising whether or not you consider multicollinearity to be a problem here.  

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
vif(wb_mdl1)
```

::: {.callout-important icon=false appearance="minimal"}

The VIF values for all predictors are <5, indicating that multicollinearity is not adversely affecting model estimates. 

:::

`r solend()`

## Diagnostics 

`r qbegin(7)`
Create a new tibble which contains:  

1. The original variables from the model (Hint, what does `wb_mdl1$model` give you?)
2. The fitted values from the model $\hat y$  
3. The residuals $\hat \epsilon$
4. The studentised residuals
5. The hat values
6. The Cook's Distance values

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}

mdl_diagnost <- 
  tibble(
  wb_mdl1$model,
  fitted = fitted(wb_mdl1),
  resid = residuals(wb_mdl1),
  studres = rstudent(wb_mdl1),
  hats = hatvalues(wb_mdl1),
  cooksd = cooks.distance(wb_mdl1)
)
```

`r solend()`

<br>

`r qbegin(8)`
From the tibble above, comment on the following:

* Looking at the studentised residuals, are there any outliers? 
* Looking at the hat values, are there any observations with high leverage? 
* Looking at the Cook's Distance values, are there any highly influential points?  

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

::: {.panel-tabset}

## Outliers
In a standard normal distribution, 95% of the values are roughly between -2 and 2. Because of this, studentised residuals of $>2$ or $< -2$ indicate potential outlyingness. 

We can ask R whether the *absolute* values (by specifying `abs()`) are $>2$:
```{r}
table(abs(mdl_diagnost$studres) > 2)
```

All values are `FALSE`, which tells us that none of the absolute values are $>2$. 

We could also *filter* our newly created tibble to these observations:
```{r}
mdl_diagnost %>% 
  filter(abs(studres)>2)
```

There are zero rows in the tibble that have absolute values $>2$.

::: {.callout-important icon=false appearance="minimal"}

There are no outliers in our data. 

:::

## High Leverage

Recall that hat values of more than $2 \bar{h}$ (2 times the average hat value) are considered high leverage. The average hat value, $\bar{h}$ is calculated as $\frac{k + 1}{n}$, where $k$ is the number of predictors, and $n$ is the sample size.

For our model:
$$
\bar h = \frac{k+1}{n} = \frac{2+1}{200} = \frac{3}{200} = 0.015
$$
We can ask whether any of observations have hat values which are greater than $2 \bar h$:

```{r}
table(mdl_diagnost$hats > (2*0.015))
```


```{r}
mdl_diagnost %>%
  filter(hats > (2*0.015))
```

No values have been returned (the tibble has zero rows), hence we do not have any observations that have hat values which are greater than $2 \bar h$.

::: {.callout-important icon=false appearance="minimal"}

There are `r sum(mdl_diagnost$hats > (2*0.015))` observations that have high leverage.  

:::

## Influential Points

Recall that we have a Cook's Distance cut-off of $\frac{4}{n-k-1}$, where $k$ is the number of predictors, and $n$ is the sample size.  

For our model:
$$
D_{cutoff} = \frac{4}{n-k-1} = \frac{4}{200 - 2 - 1} = \frac{4}{197} = 0.020
$$

We can ask whether any of observations have a high influence on our model estimates:

```{r}
table(mdl_diagnost$cooksd > 0.020)
```


```{r}
mdl_diagnost %>%
  filter(cooksd > 0.020)
```

No values have been returned (the tibble has zero rows), hence we do not have any observations that have a high influence on our model estimates.

You can also display the Cook's Distance values themselves using `plot(model, which = 4)`:

```{r}
plot(wb_mdl1, which = 4)
```

::: {.callout-important icon=false appearance="minimal"}

None of our observations have a high influence on our model estimates, as the maximum value of Cook’s distance in our sample is  0.108, which is less than the cutt-off value of 0.020. Thus, we do not appear to have any influential points in our sample. 

:::

:::

`r solend()`

<br>

`r qbegin(9)`

Use the function `influence.measures()` to extract these delete-1 measures of influence.  

Try plotting the distributions of some of these measures. 

:::{.callout-tip appearance="simple" collapse="true"}

### Hint

The function `influence.measures()` returns an `infl`-type object. To plot this, we need to find a way to extract the actual numbers from it.  
What do you think `names(influence.measures(wb_mdl1))` shows you? How can we use `influence.measures(wb_mdl1)$<insert name here>` to extract the matrix of numbers?  

:::

`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
inf_mes <- influence.measures(wb_mdl1)
round(inf_mes$infmat[1:10,],3)
```
  
Let's plot the distribution of COVRATIO statistics. 

Recall that values which are $>1+\frac{3(k+1)}{n}$ or $<1-\frac{3(k+1)}{n}$ are considered as having strong influence.  

For our model:
$$
1 \pm \frac{3(k+1)}{n} \quad = \quad 1 \pm\frac{3(2+1)}{200} \quad = \quad 1\pm \frac{9}{200} \quad = \quad 1\pm0.045
$$
The "infmat" bit of an `infl`-type object contains the numbers, as we can see from out output above. To use it with ggplot, we will need to turn it into a dataframe (`as.data.frame()`), or a tibble (`as_tibble()`):   
```{r message=FALSE, warning=FALSE}
infdata <- inf_mes$infmat %>%
  as_tibble()
```

Now we can build our plot. It would be useful to add vertical lines at the values $\quad 1\pm0.045$. To do so, we can use the `geom_vline()` function: 

```{r message=FALSE, warning=FALSE}
ggplot(data = infdata, aes(x = cov.r)) + 
  geom_histogram() +
  geom_vline(aes(xintercept = c(1-0.045), col = "blue")) +
  geom_vline(aes(xintercept = c(1+0.045), col = "red")) + 
  theme(legend.position = "none")  #remove legend
```

It looks like a few observations may be having quite a high influence here. This is perhaps not that surprising as we only have 32 datapoints. 

<div class="divider div-transparent div-dot"></div>

# Compile Report

`r qbegin("Compile Report", qlabel = FALSE)`  

Knit your report to PDF, and check over your work. To do so, you should make sure:

- Only the output you want your reader to see is visible (e.g., do you want to hide your code?)
- Check that the **tinytex** package is installed
- Ensure that the ‘yaml’ (bit at the very top of your document) looks something like this:

```{}
---
title: "this is my report title"
author: "B1234506"
date: "07/09/2024"
output: bookdown::pdf_document2
---
```

:::{.callout-tip appearance="simple" collapse="true"}
# What to do if you cannot knit to PDF
If you are having issues knitting directly to PDF, try the following:  

- Knit to HTML file  
- Open your HTML in a web-browser (e.g. Chrome, Firefox)  
- Print to PDF (Ctrl+P, then choose to save to PDF)  
- Open file to check formatting
:::

:::{.callout-tip appearance="simple" collapse="true"}
# Hiding Code and/or Output

:::{.panel-tabset}
## Hiding R Code

To not show the code of an R code chunk, and only show the output, write:

````
```{{r, echo=FALSE}}
# code goes here
```
````

## Hiding R Output

To show the code of an R code chunk, but hide the output, write:

````
```{{r, results='hide'}}
# code goes here
```
````

## Hiding R Code and Output

To hide both code and output of an R code chunk, write:

````
```{{r, include=FALSE}}
# code goes here
```
````
:::

:::

:::{.callout-tip appearance="simple" collapse="true"}

### Tinytex
You must make sure you have **tinytex** installed in R so that you can “Knit” your Rmd document to a PDF file:

```{r eval = FALSE}
install.packages("tinytex")
tinytex::install_tinytex()
```

:::

`r qend()`

`r solbegin(show = params$SHOW_SOLS, toggle = params$TOGGLE)`

You should end up with a PDF file. If you have followed the above instructions and still have issues with knitting, speak with a Tutor. 

`r solend()`
